from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton
from PyQt5.QtCore import pyqtSignal
from utils import finde_monster_daten, lade_karten_db
from xp_manager import lade_xp_daten, speichere_xp_daten, gib_xp
import random

class BattleWindow(QWidget):
    kampf_beendet = pyqtSignal()

    def __init__(self, player_data, enemy_data, monster_db):
        super().__init__()
        self.setWindowTitle("Kampf")

        self.player_data = player_data
        self.enemy_data = enemy_data
        self.monster_db = monster_db
        self.karten_db = lade_karten_db()
        self.used_cards = []

        self.player_monster = finde_monster_daten(self.player_data["monster"], monster_db)
        self.enemy_monster = finde_monster_daten(self.enemy_data["monster"], monster_db)

        self.player_hp = self.player_monster["hp"]
        self.enemy_hp = self.enemy_monster["hp"]

        self.init_ui()

    def init_ui(self):
        self.layout = QVBoxLayout()

        self.info_label = QLabel("Ein epischer Kampf beginnt!")
        self.layout.addWidget(self.info_label)

        self.player_label = QLabel(f"ðŸ§‘ {self.player_monster['name']} - HP: {self.player_hp}")
        self.enemy_label = QLabel(f"ðŸ¤– {self.enemy_monster['name']} - HP: {self.enemy_hp}")
        self.layout.addWidget(self.player_label)
        self.layout.addWidget(self.enemy_label)

        self.card_buttons = []
        for card_id in self.player_data.get("deck", []):
            if card_id in self.karten_db:
                btn = QPushButton(self.karten_db[card_id]["name"])
                btn.clicked.connect(lambda checked, c=card_id, b=btn: self.spiele_karte(c, b))
                self.layout.addWidget(btn)
                self.card_buttons.append(btn)

        self.attack_button = QPushButton("KÃ¤mpfen")
        self.attack_button.clicked.connect(self.normaler_angriff)
        self.layout.addWidget(self.attack_button)

        self.setLayout(self.layout)

    def spiele_karte(self, card_id, button):
        if card_id in self.used_cards:
            self.info_label.setText("Du hast diese Karte schon benutzt.")
            return

        card = self.karten_db[card_id]
        effekt = card["effect"]
        wert = card["value"]

        self.info_label.setText(f"Du benutzt {card['name']}!")

        if effekt in self.player_monster:
            self.player_monster[effekt] += wert

        self.used_cards.append(card_id)
        button.setDisabled(True)

    def normaler_angriff(self):
        schaden_spieler = max(1, self.player_monster["atk"] - self.enemy_monster["def"])
        schaden_enemy = max(1, self.enemy_monster["atk"] - self.player_monster["def"])

        self.enemy_hp -= schaden_spieler
        self.player_hp -= schaden_enemy

        self.info_label.setText(f"Du machst {schaden_spieler} Schaden. Gegner macht {schaden_enemy} Schaden.")
        self.update_labels()

        if self.enemy_hp <= 0:
            self.info_label.setText("Du hast gewonnen!")
            self.beende_kampf("player")
        elif self.player_hp <= 0:
            self.info_label.setText("Du wurdest besiegt!")
            self.beende_kampf("enemy")

    def update_labels(self):
        self.player_label.setText(f"ðŸ§‘ {self.player_monster['name']} - HP: {self.player_hp}")
        self.enemy_label.setText(f"ðŸ¤– {self.enemy_monster['name']} - HP: {self.enemy_hp}")

    def beende_kampf(self, sieger):
        if sieger == "player":
            xp_daten = lade_xp_daten()
            gib_xp(self.player_data, self.player_monster, xp_daten)
            speichere_xp_daten(xp_daten)
        self.kampf_beendet.emit()
        self.close()
