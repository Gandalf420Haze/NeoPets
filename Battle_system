import random
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QHBoxLayout
from PyQt5.QtCore import pyqtSignal
from utils import finde_monster_daten, lade_karten_db
from xp_manager import lade_xp_daten, speichere_xp_daten, gib_xp

class BattleWindow(QWidget):
    kampf_beendet = pyqtSignal()

    def __init__(self, player_data, enemy_data, monster_db):
        super().__init__()
        self.player_data = player_data
        self.enemy_data = enemy_data
        self.monster_db = monster_db
        self.setWindowTitle("Kampf")

        self.player_monster = finde_monster_daten(player_data["monster"], monster_db)
        self.enemy_monster = finde_monster_daten(enemy_data["monster"], monster_db)

        self.player_name = player_data.get("name", "Player")
        self.enemy_name = enemy_data.get("name", "BOT")

        self.player_hp = self.player_monster["hp"]
        self.enemy_hp = self.enemy_monster["hp"]

        self.player_atk = self.player_monster["atk"]
        self.player_def = self.player_monster["def"]
        self.player_spd = self.player_monster["spd"]

        self.karten_db = lade_karten_db()
        self.used_cards = set()

        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        self.status_label = QLabel("Kampf gestartet!")
        self.player_label = QLabel()
        self.enemy_label = QLabel()
        layout.addWidget(self.status_label)
        layout.addWidget(self.player_label)
        layout.addWidget(self.enemy_label)

        # Karten-Buttons
        self.karten_buttons = QHBoxLayout()
        self.card_buttons = []

        for card_id in self.player_data.get("deck", []):
            btn = QPushButton(self.karten_db[card_id]["name"])
            btn.clicked.connect(lambda checked, c=card_id, b=btn: self.spiele_karte(c, b))
            self.karten_buttons.addWidget(btn)
            self.card_buttons.append((btn, card_id))

        layout.addLayout(self.karten_buttons)

        # Kämpfen-Button
        self.attack_btn = QPushButton("Kämpfen")
        self.attack_btn.clicked.connect(self.normaler_angriff)
        layout.addWidget(self.attack_btn)

        self.setLayout(layout)
        self.update_ui()

    def update_ui(self):
        self.player_label.setText(f"{self.player_name} ({self.player_monster['name']}) - HP: {self.player_hp}")
        self.enemy_label.setText(f"{self.enemy_name} ({self.enemy_monster['name']}) - HP: {self.enemy_hp}")

    def spiele_karte(self, card_id, button):
        if card_id in self.used_cards:
            return

        effekt = self.karten_db[card_id]["effect"]
        wert = self.karten_db[card_id]["value"]

        if effekt == "atk":
            self.player_atk += wert
            self.status_label.setText(f"ATK erhöht um {wert}!")
        elif effekt == "def":
            self.player_def += wert
            self.status_label.setText(f"DEF erhöht um {wert}!")
        elif effekt == "spd":
            self.player_spd += wert
            self.status_label.setText(f"SPD erhöht um {wert}!")

        self.used_cards.add(card_id)
        button.setDisabled(True)

    def normaler_angriff(self):
        # Spieler greift an
        schaden_an_enemy = max(0, self.player_atk - self.enemy_monster["def"])
        self.enemy_hp -= schaden_an_enemy
        self.status_label.setText(f"{self.player_name} greift an und macht {schaden_an_enemy} Schaden!")

        if self.enemy_hp <= 0:
            self.beende_kampf("player")
            return

        # Gegner greift an
        schaden_an_player = max(0, self.enemy_monster["atk"] - self.player_def)
        self.player_hp -= schaden_an_player
        self.status_label.setText(self.status_label.text() + f"\n{self.enemy_name} macht {schaden_an_player} Schaden!")

        if self.player_hp <= 0:
            self.beende_kampf("enemy")
            return

        self.update_ui()

    def beende_kampf(self, sieger):
        xp_daten = lade_xp_daten()
        if sieger == "player":
            gib_xp(self.player_data, self.player_monster, xp_daten)
        speichere_xp_daten(xp_daten)

        self.status_label.setText(f"Kampf beendet! Sieger: {self.player_name if sieger == 'player' else self.enemy_name}")
        self.kampf_beendet.emit()
        self.close()
